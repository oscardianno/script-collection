import json
import time
import random
import requests
import pandas as pd

YOUTUBE_URL = 'https://www.youtube.com/watch?v='
METADATA_API_URL = 'https://filmot.com/api/getvideos'
METADATA_API_KEY = 'md5paNgdbaeudounjp39'

# Define the input and output file names
# This one is generated by running "youtube-dl <playlist_url >--get-id --get-title > playlist_output.txt"
videos_recovered_output_file = 'example-playlist-output.txt'
# This one must be done by hand, by copying the console output of the youtube-dl command
videos_console_output_file = 'example-playlist-console-output.txt'
# This one will be generated after running this script
xlsx_output_file = 'example-playlist-backup.xlsx'


def getUnavailableVideoMetadata(videoId, currentLine, totalLines):
    # Example response:
    # [{"id":"2VUlLF3YGcA","uploaddate":"2020-03-17","duration":226,"title":"Over and Over","channelid":"UClgwylR8lyJSwzJ5ll3CK2w","channelname":"The Altons - Topic"}]
    title = ''
    channelId = ''
    channelName = ''
    # Sleep a random time between 1 and 5 seconds to avoid rate limiting
    time.sleep(random.randint(5, 10))
    # Query the API
    # print('LOG: Querying API for video ' + videoId + '...')
    queryUrl = METADATA_API_URL + '?key=' + METADATA_API_KEY + '&id=' + videoId
    response = requests.get(queryUrl)
    # print('LOG: API response: ' + response.text)
    print('LOG: ' + str(currentLine) + '/' + str(totalLines) +
          ' - ' + videoId + ' - ' + response.text)
    if (response.status_code == 429):
        # Rate limited. Sleep 1 minute and try again
        # print('LOG: API response: ' + response.text)
        print('LOG: Rate limited. Sleeping 1 minute...')
        time.sleep(60)
        print('LOG: Waking up!')
        response = requests.get(queryUrl)
        print('LOG: API response: ' + response.text)
    if (response.status_code == 200 and response.json() != []):
        # Success. Return the title, channel ID and channel name
        data = response.json()
        title = data[0]['title']
        channelId = data[0]['channelid']
        channelName = data[0]['channelname']
        queryInfo = ''
        return title, channelId, channelName, queryInfo
    else:
        # Error. Return the API response
        queryInfo = 'API response: ' + response.text
        return title, channelId, channelName, queryInfo


def getVideoIdAndUrlFromOutputLine(line):
    videoId = ''
    url = ''
    if line.find('youtube]') != -1:
        videoIdIndex = line.find('youtube]') + len('youtube]') + 1
        videoId = line[videoIdIndex: line.find(':', videoIdIndex)]
        url = YOUTUBE_URL + videoId
    return videoId, url


def decodeOutputLineError(line, currentLine, totalLines):
    # Example lines:
    # ERROR: [youtube] 5Q3VU_JtLbU: Video unavailable. This video is not available
    # ERROR: [youtube] Q0_rjvo-C5o: This video has been removed for violating YouTube's Community Guidelines
    # ERROR: [youtube] SYTAvwZyIA0: Private video. Sign in if you've been granted access to this video
    # ERROR: [youtube] 183mZ-wj7eA: This video is only available to Music Premium members
    # WARNING: [youtube] Invalid start time (455.0 < 0) for chapter "Round about"

    title = ''
    videoId = ''
    url = ''
    status = 'ERROR'
    errorType = ''
    additionalInfo = ''
    queryInfo = ''
    channelId = ''
    channelName = ''

    try:
        if line.find('Video unavailable') != -1:
            errorType = 'Video unavailable'
            additionalInfo = line[line.find(
                'Video unavailable') + len('Video unavailable') + 2:]

        elif line.find('removed for violating') != -1:
            errorType = 'Removed'
            additionalInfo = line[line.find(
                'removed') + len('removed') + 1:]

        elif line.find('Private video') != -1:
            errorType = 'Private video'

        elif line.find('only available to Music Premium members') != -1:
            errorType = 'Music Premium members only'

        elif line.find('Invalid start time') != -1:
            errorType = 'Invalid start time'
            # Title is found as the chapter name
            title = line[line.find('for chapter') + len('for chapter') + 1:]
            return title, videoId, url, status, errorType, additionalInfo, queryInfo, channelId, channelName

        else:
            print('ERROR: Unknown output line: ' + line)
            errorType = 'Unknown output line'
            # Unrecognized error. Return the whole line as additional info
            additionalInfo = line
            return title, videoId, url, status, errorType, additionalInfo, queryInfo, channelId, channelName

        # Try to recover the video metadata
        videoId, url = getVideoIdAndUrlFromOutputLine(line)
        title, channelId, channelName, queryInfo = getUnavailableVideoMetadata(
            videoId, currentLine, totalLines
        )

        return title, videoId, url, status, errorType, additionalInfo, queryInfo, channelId, channelName

    except Exception as e:
        print('ERROR [!!!]: Error decoding output line: ' + line)
        print('ERROR [!!!]: ' + str(e))
        return title, videoId, url, status, errorType, additionalInfo, queryInfo, channelId, channelName


def main():
    # Create an empty list to store the video data
    video_data = []

    if (videos_recovered_output_file != ''):
        print('LOG: Processing recovered videos file...')
        with open(videos_recovered_output_file, 'r', errors="ignore") as file:
            lines = file.readlines()

        # Process each line and extract the video titles and IDs
        for i in range(0, len(lines), 2):
            title = lines[i].strip()
            video_id = lines[i+1].strip()
            url = YOUTUBE_URL + video_id
            status = 'OK'
            errorType = ''
            additionalInfo = ''
            queryInfo = ''
            channelId = ''
            channelName = ''
            video_data.append([title, video_id, url, status, errorType,
                              additionalInfo, queryInfo, channelId, channelName])
        print('LOG: Recovered videos file processed.\n')

    if (videos_console_output_file != ''):
        print('LOG: Processing output videos file...')
        with open(videos_console_output_file, 'r', errors="ignore") as file:
            lines = file.readlines()

        # Process each line and decode the error
        totalLines = len(lines)
        for i in range(0, totalLines):
            title, video_id, url, status, errorType, additionalInfo, queryInfo, channelId, channelName = decodeOutputLineError(
                lines[i], i, totalLines
            )
            video_data.append([title, video_id, url, status, errorType,
                              additionalInfo, queryInfo, channelId, channelName])
        print('LOG: Output videos file processed.\n')

    # Create a Pandas DataFrame with the video data
    df = pd.DataFrame(video_data, columns=[
                      'Title', 'ID', 'URL', 'Status', 'Error Type', 'Additional Info', 'Query Info', 'Channel ID', 'Channel Name'])

    # Write the DataFrame to an Excel file
    df.to_excel(xlsx_output_file, index=False)


main()
